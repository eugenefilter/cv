{
  "compilerOptions": { // указываются параметры, которые определяют поведение TypeScript компилятора
    /*
      TypeScript позволяет импортировать модули, которые не имеют экспортов по умолчанию
      и не строго следуют стандартам ES модуля
    */
    "allowSyntheticDefaultImports": true,
    /*
      Опция esModuleInterop=true автоматически включает allowSyntheticDefaultImports=true
      предназначена для улучшения совместимости TypeScript с модулями CommonJS и ES6, 
      упрощая их импорт и использование.
      1) Включает синтетические значения по умолчанию для модулей, которые используют CommonJS или AMD
      2) Делает импорт модулей, которые экспортируют объекты через module.exports в CommonJS, 
      более удобным и совместимым с импортами в стиле ES6.
     */
    "esModuleInterop": true,
    /* 
      будет ли TypeScript компилятор добавлять строгий режим в скомпилированные файлы JavaScript. 
      добавляет директиву "use strict"; в начало каждого файла JavaScript
    */
    "alwaysStrict": true,
    /*
      будет ли TypeScript компилятор генерировать файлы деклараций (.d.ts) 
      наряду с компиляцией .ts файлов в .js
      Файлы деклараций помогают при использовании вашего TypeScript кода в других TypeScript проектах, 
      предоставляя информацию о типах.
    */
    "declaration": true,
    /*
      указывает TypeScript компилятору генерировать карты источников (source maps) 
      для файлов деклараций (.d.ts).
    */
    "declarationMap": true,
    /*
      позволяет использовать современные конструкции итерации (for...of, spread-оператор и др.) 
      в более старых версиях JavaScript, таких как ES3 и ES5.
    */
    "downlevelIteration": true,
    /*
      позволяет использовать декораторы, которые являются экспериментальной функцией в TypeScript.
      Декораторы - это специальный вид объявлений, который может быть присвоен классам, 
      методам, свойствам и параметрам для изменения их поведения.
    */
    "experimentalDecorators": true,
    /*
      определяет список встроенных библиотек TypeScript, которые будут доступны во время компиляции.
    */
    "lib": [
      "ES2020",
      // "ESNext" Эта опция включает все предложенные и экспериментальные функции, которые еще не 
      // включены в стандарт ECMAScript, но могут быть в будущих версиях.
      "DOM", // Добавляет типы и функции, доступны в браузерной среде (document, window и другие DOM API).
      "DOM.Iterable" //  Добавляет поддержку итерационных элементов DOM, что позволяет использовать 
      // современные итерационные функции с объектами, возвращаемыми DOM API, такими как NodeList и 
      // HTMLCollection
    ],
    /*
      определяет, как TypeScript компилирует модули в JavaScript.
      commonjs - Этот формат используется в Node.js и предполагает, что каждый файл является отдельным 
        модулем, который экспортирует свои элементы через module.exports
      amd - Используется для браузерных приложений с асинхронной загрузкой модулей.
      umd - Предназначен для поддержки различных сред, включая браузеры и Node.js.
      ES6/ES2015 - Используется для генерации кода модулей согласно стандарту ECMAScript 2015.
      ESNext - Использует наиболее современный синтаксис модулей, поддерживаемый текущей версией TypeScript.
      */
    "module": "ESNext", // "commonjs"
    /*
      определяет, разрешено ли использование неявного типа any в TypeScript коде.
    */
    "noImplicitAny": true,
    /*
      определяет, разрешено ли использование неявных возвратов из функций в TypeScript коде.
      если true из метода должен ьыть явный возврат результата
    */
    "noImplicitReturns": true,
    /*
      определяет каталог, в который TypeScript компилирует результаты своей работы 
      (т.е. скомпилированные JavaScript файлы).
    */
    "outDir": "dist",
    /*
      позволяет TypeScript пропустить проверку файлов .d.ts (файлы объявлений типов), 
      что может сократить время компиляции проекта.
    */
    "skipLibCheck": true,
    /*
      указывает TypeScript компилятору генерировать файлы карт исходных кодов (source maps), 
      которые помогают отладчикам отображать исходные файлы TypeScript вместо их скомпилированных 
      JavaScript версий.
    */
    "sourceMap": true,
    /*
      позволяет подавлять ошибки TypeScript, связанные с неявными типами при доступе к свойствам 
      через индексаторы (index signatures).
      полезно, если вы работаете с объектами, где не все свойства имеют явные типы и вы хотите 
      избежать многочисленных ошибок компиляции, связанных с неявными типами
    */
    "suppressImplicitAnyIndexErrors": false,
    /*
      определяет версию ECMAScript (JavaScript), в которую будет компилироваться TypeScript код.
    */
    "target": "ES2020", // "ESNext"
    /*
      управляет тем, как TypeScript генерирует свойства классов в JavaScript, 
      особенно для инициализации свойств в классах.
      Когда эта опция включена (true), TypeScript использует Object.defineProperty 
      для инициализации свойств классов в JavaScript. 
    */
    "useDefineForClassFields": true,
    /* Bundler mode */
    /*
      определяет, как TypeScript обрабатывает JSX (расширение синтаксиса JavaScript, 
      используемое в React).

      preserve - TypeScript сохраняет JSX как есть в скомпилированном JavaScript коде. 
        Этот режим используется, если вы планируете обрабатывать JSX с помощью других 
        инструментов (например, Babel)

      react - TypeScript трансформирует JSX в вызовы функций React.createElement. 
      Этот режим используется для веб-приложений на React.

      react-native - Аналогично режиму "react", но адаптирован для использования в React Native.

      react-jsx - TypeScript трансформирует JSX в вызовы функций
    */
    "jsx": "react-jsx",
    /*
      управляет тем, как TypeScript разрешает модули (импорты) в вашем проекте.
    */
    "moduleResolution": "bundler", // "node"
    /*
      указывает TypeScript, необходимо ли компилировать TypeScript код в JavaScript.
      true - выполняет только проверку типов и синтаксиса, не создавая конечные JavaScript файлы.
    */
    "noEmit": true, // false
    /*
      указывает TypeScript, следует ли разрешать импорт JSON файлов как модулей в вашем проекте.
      true - import data from './data.json';
    */
    "resolveJsonModule": true,
    /*
      позволяет TypeScript импортировать модули, используя расширения файлов .ts или .tsx.
    */
    "allowImportingTsExtensions": true,
    /*
      предотвращает TypeScript от объединения модулей в один файл при компиляции.  
    */
    "isolatedModules": true,
    /* Linting */
    /*
      включает или отключает проверку на отсутствие "проброса" (fallthrough) в операторе switch.
      true - это ситуация, когда не указан оператор break, return
    */
    "noFallthroughCasesInSwitch": true, // false
    /*
      является сокращенной формой для включения всех строгих проверок TypeScript.
    */
    "strict": true,
    /*
      включает строгую проверку совместимости типов для функций в TypeScript.
    */
    "strictFunctionTypes": true,
    /*
      включает строгую проверку для значений null и undefined в TypeScript.
    */
    "strictNullChecks": true,
    /*
      включает проверку неиспользуемых локальных переменных в TypeScript.
    */
    "noUnusedLocals": true,
    /*
      включает проверку неиспользуемых параметров функций в TypeScript.
    */
    "noUnusedParameters": true,
  },
  "include": [
    "src"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "coverage",
    ".vscode",
    "**/__tests__/*"
  ],
  /*
    используется для организации и сборки TypeScript проекта, состоящего из нескольких подпроектов 
    или модулей, где один модуль зависит от другого.
  */
  "references": [
    {
      "path": "./tsconfig.node.json"
    }
  ]
}